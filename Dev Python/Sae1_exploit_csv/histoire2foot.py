"""Fichier source de la SAE 1.01 partie 1
Historique des matchs de football internationaux
"""

#---------------------------------------------------------------------------------------------
#Exemples de données pour vous aidez à faire des tests
#---------------------------------------------------------------------------------------------

#exemples de matchs de foot
MATCH1 = ('2021-06-28', 'France', 'Switzerland', 3, 3, 'UEFA Euro', 'Bucharest', 'Romania', True)
MATCH2 = ('1998-07-12', 'France', 'Brazil', 3, 0, 'FIFA World Cup', 'Saint-Denis', 'France', False)
MATCH3 = ('1978-04-05', 'Germany', 'Brazil', 0, 1, 'Friendly', 'Hamburg', 'Germany', False)

#exemples de liste de matchs de foot
LISTE1 = [('1970-04-08', 'France', 'Bulgaria', 1, 1, 'Friendly', 'Rouen', 'France', False),
          ('1970-04-28', 'France', 'Romania', 2, 0, 'Friendly', 'Reims', 'France', False),
          ('1970-09-05', 'France', 'Czechoslovakia', 3, 0, 'Friendly', 'Nice', 'France', False),
          ('1970-11-11', 'France', 'Norway', 3, 1, 'UEFA Euro qualification',
           'Lyon', 'France', False)
         ]
LISTE2 = [('1901-03-09', 'England', 'Northern Ireland', 3, 0, 'British Championship',
           'Southampton', 'England', False),
          ('1901-03-18', 'England', 'Wales', 6, 0, 'British Championship',
           'Newcastle', 'England', False),
          ('1901-03-30', 'England', 'Scotland', 2, 2, 'British Championship',
           'London', 'England', False),
          ('1902-05-03', 'England', 'Scotland', 2, 2, 'British Championship',
           'Birmingham', 'England', False),
          ('1903-02-14', 'England', 'Northern Ireland', 4, 0, 'British Championship',
           'Wolverhampton', 'England', False),
          ('1903-03-02', 'England', 'Wales', 2, 1, 'British Championship',
           'Portsmouth', 'England', False),
          ('1903-04-04', 'England', 'Scotland', 1, 2, 'British Championship',
           'Sheffield', 'England', False),
          ('1905-02-25', 'England', 'Northern Ireland', 1, 1, 'British Championship',
           'Middlesbrough', 'England', False),
          ('1905-03-27', 'England', 'Wales', 3, 1, 'British Championship',
           'Liverpool', 'England', False),
          ('1905-04-01', 'England', 'Scotland', 1, 0, 'British Championship',
           'London', 'England', False),
          ('1907-02-16', 'England', 'Northern Ireland', 1, 0, 'British Championship',
           'Liverpool', 'England', False),
          ('1907-03-18', 'England', 'Wales', 1, 1, 'British Championship',
           'London', 'England', False),
          ('1907-04-06', 'England', 'Scotland', 1, 1, 'British Championship',
           'Newcastle', 'England', False),
          ('1909-02-13', 'England', 'Northern Ireland', 4, 0, 'British Championship',
           'Bradford', 'England', False),
          ('1909-03-15', 'England', 'Wales', 2, 0, 'British Championship',
           'Nottingham', 'England', False),
          ('1909-04-03', 'England', 'Scotland', 2, 0, 'British Championship',
           'London', 'England', False)
         ]
LISTE3 = [('1901-03-30', 'Belgium', 'France', 1, 2, 'Friendly', 'Bruxelles',
           'Belgium', False),
          ('1901-03-30', 'England', 'Scotland', 2, 2, 'British Championship',
           'London', 'England', False),
          ('1903-04-04', 'Brazil', 'Argentina', 3, 0, 'Friendly', 'Sao Paulo',
           'Brazil', False),
          ('1903-04-04', 'England', 'Scotland', 1, 2, 'British Championship',
           'Sheffield', 'England', False),
          ('1970-09-05', 'France', 'Czechoslovakia', 3, 0, 'Friendly', 'Nice',
           'France', False),
          ('1970-11-11', 'France', 'Norway', 3, 1, 'UEFA Euro qualification',
           'Lyon', 'France', False)
         ]
LISTE4 = [('1978-03-19', 'Argentina', 'Peru', 2, 1, 'Copa Ramón Castilla',
           'Buenos Aires', 'Argentina', False),
          ('1978-03-29', 'Argentina', 'Bulgaria', 3, 1, 'Friendly',
           'Buenos Aires', 'Argentina', False),
          ('1978-04-05', 'Argentina', 'Romania', 2, 0, 'Friendly', 'Buenos Aires',
           'Argentina', False),
          ('1978-05-03', 'Argentina', 'Uruguay', 3, 0, 'Friendly', 'Buenos Aires',
           'Argentina', False),
          ('1978-06-01', 'Germany', 'Poland', 0, 0, 'FIFA World Cup', 'Buenos Aires',
           'Argentina', True),
          ('1978-06-02', 'Argentina', 'Hungary', 2, 1, 'FIFA World Cup', 'Buenos Aires',
           'Argentina', False),
          ('1978-06-02', 'France', 'Italy', 1, 2, 'FIFA World Cup', 'Mar del Plata',
           'Argentina', True),
          ('1978-06-02', 'Mexico', 'Tunisia', 1, 3, 'FIFA World Cup', 'Rosario',
           'Argentina', True),
          ('1978-06-03', 'Austria', 'Spain', 2, 1, 'FIFA World Cup', 'Buenos Aires',
           'Argentina', True),
          ('1978-06-03', 'Brazil', 'Sweden', 1, 1, 'FIFA World Cup', 'Mar del Plata',
           'Argentina', True),
          ('1978-06-03', 'Iran', 'Netherlands', 0, 3, 'FIFA World Cup', 'Mendoza',
           'Argentina', True),
          ('1978-06-03', 'Peru', 'Scotland', 3, 1, 'FIFA World Cup', 'Córdoba',
           'Argentina', True),
          ('1978-06-06', 'Argentina', 'France', 2, 1, 'FIFA World Cup', 'Buenos Aires',
           'Argentina', False),
          ('1978-06-06', 'Germany', 'Mexico', 6, 0, 'FIFA World Cup', 'Córdoba',
           'Argentina', True),
          ('1978-06-06', 'Hungary', 'Italy', 1, 3, 'FIFA World Cup', 'Mar del Plata',
           'Argentina', True),
          ('1978-06-06', 'Poland', 'Tunisia', 1, 0, 'FIFA World Cup', 'Rosario',
           'Argentina', True),
          ('1978-06-07', 'Austria', 'Sweden', 1, 0, 'FIFA World Cup', 'Buenos Aires',
           'Argentina', True),
          ('1978-06-07', 'Brazil', 'Spain', 0, 0, 'FIFA World Cup', 'Mar del Plata',
           'Argentina', True),
          ('1978-06-07', 'Iran', 'Scotland', 1, 1, 'FIFA World Cup', 'Córdoba',
           'Argentina', True),
          ('1978-06-07', 'Netherlands', 'Peru', 0, 0, 'FIFA World Cup', 'Mendoza',
           'Argentina', True),
          ('1978-06-10', 'Argentina', 'Italy', 0, 1, 'FIFA World Cup', 'Buenos Aires',
           'Argentina', False),
          ('1978-06-10', 'France', 'Hungary', 3, 1, 'FIFA World Cup', 'Mar del Plata',
           'Argentina', True),
          ('1978-06-10', 'Germany', 'Poland', 1, 3, 'FIFA World Cup', 'Rosario',
           'Argentina', True),
          ('1978-06-11', 'Austria', 'Brazil', 0, 1, 'FIFA World Cup', 'Mar del Plata',
           'Argentina', True),
          ('1978-06-11', 'Iran', 'Peru', 1, 4, 'FIFA World Cup', 'Córdoba',
           'Argentina', True),
          ('1978-06-11', 'Netherlands', 'Scotland', 2, 3, 'FIFA World Cup', 'Mendoza',
           'Argentina', True),
          ('1978-06-11', 'Spain', 'Sweden', 1, 0, 'FIFA World Cup', 'Buenos Aires',
           'Argentina', True),
          ('1978-06-14', 'Argentina', 'Poland', 2, 0, 'FIFA World Cup', 'Rosario',
           'Argentina', False),
          ('1978-06-14', 'Austria', 'Netherlands', 1, 5, 'FIFA World Cup', 'Córdoba',
           'Argentina', True),
          ('1978-06-14', 'Brazil', 'Peru', 3, 0, 'FIFA World Cup', 'Mendoza',
           'Argentina', True),
          ('1978-06-14', 'Germany', 'Italy', 0, 0, 'FIFA World Cup', 'Buenos Aires',
           'Argentina', True),
          ('1978-06-18', 'Argentina', 'Brazil', 0, 0, 'FIFA World Cup', 'Rosario',
           'Argentina', False),
          ('1978-06-18', 'Austria', 'Italy', 0, 1, 'FIFA World Cup', 'Buenos Aires',
           'Argentina', True),
          ('1978-06-18', 'Germany', 'Netherlands', 2, 2, 'FIFA World Cup', 'Córdoba',
           'Argentina', True),
          ('1978-06-18', 'Peru', 'Poland', 0, 1, 'FIFA World Cup', 'Mendoza',
           'Argentina', True),
          ('1978-06-21', 'Argentina', 'Peru', 6, 0, 'FIFA World Cup', 'Rosario',
           'Argentina', False),
          ('1978-06-21', 'Austria', 'Germany', 3, 2, 'FIFA World Cup', 'Córdoba',
           'Argentina', True),
          ('1978-06-21', 'Brazil', 'Poland', 3, 1, 'FIFA World Cup', 'Mendoza',
           'Argentina', True),
          ('1978-06-21', 'Italy', 'Netherlands', 1, 2, 'FIFA World Cup', 'Buenos Aires',
           'Argentina', True),
          ('1978-06-24', 'Brazil', 'Italy', 2, 1, 'FIFA World Cup', 'Buenos Aires',
           'Argentina', True),
          ('1978-06-25', 'Argentina', 'Netherlands', 3, 1, 'FIFA World Cup',
           'Buenos Aires', 'Argentina', False)
         ]
#forme tuple:(datematch,pays1, pays2, score1, score2, competition,
#villeaccueil, paysacceuil, terreneutre)
#--------------------------------------------------------------------------------------------------
#listes des fonctions à implémenter
#--------------------------------------------------------------------------------------------------

#Fonctions à implémenter dont les tests sont fournis


def equipe_gagnante(match):
    """retourne le nom de l'équipe qui a gagné le match. Si c'est un match nul on retourne None

    Args:
        match (tuple): un match

    Returns:
        str: le nom de l'équipe gagnante (ou None si match nul)
    """
    if match[3] == match[4]:#match nul ou tuple vide
        res = None
    elif match[3] < match[4]:#e2 gagné
        res = match[2]
    else:#e1 a gagné
        res = match[1]
    return res


def victoire_a_domicile(match):
    """indique si le match correspond à une victoire à domicile

    Args:
        match (tuple): un match

    Returns:
        bool: True si le match ne se déroule pas
        en terrain neutre et que l'équipe qui reçoit a gagné
    """
    return not match[8] and equipe_gagnante(match) == match[7]
    #on renvoie le res de l'eval plutot que de faire des tests


def nb_buts_marques(match):
    """indique le nombre total de buts marqués lors de ce match

    Args:
        match (tuple): un match

    Returns:
        int: le nombre de buts du match
    """
    return match[3] + match[4]# on ajoute les deux scores simplement


def matchs_ville(liste_matchs, ville):
    """retourne la liste des matchs qui se sont déroulés dans une ville donnée

    Args:
        liste_matchs (list): une liste de matchs
        ville (str): le nom d'une ville

    Returns:
        list: la liste des matchs qui se sont déroulé dans la ville ville
    """
    liste_m = []#on cree la liste
    for match in liste_matchs:
        if match[6] == ville:#si c'est dans la ville
            liste_m.append(match)#on ajoute le tuple entier du match
    return liste_m

def nombre_moyen_buts(liste_matchs, nom_competition):
    """retourne le nombre moyen de buts marqués par match pour une compétition donnée

    Args:
        liste_matchs (list): une liste de matchs
        nom_competwhile ind1 < len(liste_matchs1):#si liste1 pas finie
        liste_m.append(liste_matchs1[ind1])#on ajoute les matchs restants
        ind1 += 1ition (str): le nom d'une compétition

    Returns:
        float: le nombre moyen de buts par match pour la compétition
    """
    res = None
    total = 0
    cpt = 0 #pas de liste plutot un compteur comme on ne veut que les buts pas d'autres infos
    for match in liste_matchs:
        if match[5] == nom_competition:#si le match est ds la compet
            cpt += 1#ajt 1 au compteur
            total += nb_buts_marques(match)#ajout a la somme
    if cpt > 0:
        res = total / cpt#calcul moyenne
    return res

def est_bien_trie(liste_matchs):
    """vérifie si une liste de matchs est bien trié dans l'ordre chronologique
       puis pour les matchs se déroulant le même jour, dans l'ordre alphabétique
       des équipes locales

    Args:
        liste_matchs (list): une liste de matchs

    Returns:
        bool: True si la liste est bien triée et False sinon
    """
    for ind in range(1, len(liste_matchs)):
        if liste_matchs[ind-1][0] > liste_matchs[ind][0]:
            #si le jour d'avant est plus tard que celui courant
            return False
        if liste_matchs[ind-1][0] == liste_matchs[ind][0]:
            if liste_matchs[ind-1][1] > liste_matchs[ind][1]:
                #si le mm jour mais pays acceuil mauvais ordre alpha
                return False
    return True

def fusionner_matchs(liste_matchs1, liste_matchs2):
    """Fusionne deux listes de matchs triées
    sans doublons en une liste triée sans doublon
    sachant qu'un même match peut être présent dans les deux listes

    Args:
        liste_matchs1 (list): la première liste de matchs
        liste_matchs2 (list): la seconde liste de matchs

    Returns:
        list: la liste triée sans doublon comportant
        tous les matchs de liste_matchs1 et liste_matchs2
    """
    liste_m = []
    ind1 = 0 #init ind l1
    ind2 = 0 #init ind l2
    while ind1 < len(liste_matchs1) and ind2 < len(liste_matchs2):
        #tant que une des deux listes n'est pas parcourue entierement
        if liste_matchs1[ind1][0] < liste_matchs2[ind2][0]:
            #si le match l1 vient avant (date)
            liste_m.append(liste_matchs1[ind1])
            ind1 += 1
        elif liste_matchs1[ind1][0] > liste_matchs2[ind2][0]:
            #si le match vient après
            liste_m.append(liste_matchs2[ind2])
            ind2 += 1
        else:#si mm jour
            if liste_matchs1[ind1][1] < liste_matchs2[ind2][1]: #si le pays est avant en alphab
                liste_m.append(liste_matchs1[ind1])
                ind1 += 1
            elif liste_matchs1[ind1][1] > liste_matchs2[ind2][1]:#pays apres en alphab
                liste_m.append(liste_matchs2[ind2])
                ind2 += 1
            else:
                #mm equipe et mm jour= doublon
                liste_m.append(liste_matchs1[ind1])
                ind1 += 1
                ind2 += 1
    while ind1 < len(liste_matchs1):#si liste1 pas finie
        liste_m.append(liste_matchs1[ind1])#on ajoute les matchs restants
        ind1 += 1
    while ind2 < len(liste_matchs2):#si l2 pas finie
        liste_m.append(liste_matchs2[ind2])#on ajoute les matchs restants
        ind2 += 1
    return liste_m
#refactorisé ici

def resultats_equipe(liste_matchs, equipe):
    """donne le nombre de victoire, de matchs nuls et de défaites pour une équipe donnée

    Args:
        liste_matchs (list): une liste de matchs
        equipe (str): le nom d'une équipe (pays)

    Returns:
        tuple: un triplet d'entiers contenant le nombre de victoires, nuls et défaites de l'équipe
    """
    vic = 0
    nuls = 0
    defs = 0
    for match in liste_matchs:
        if equipe in (match[1], match[2]):# si l equipe est soit e1 ou e2
            if equipe_gagnante(match) == equipe:#si l e a gagné
                vic += 1
            elif equipe_gagnante(match) is None:# m nul
                nuls += 1
            else:#defaite
                defs += 1
    return (vic, nuls, defs)


def plus_gros_scores(liste_matchs):
    """retourne la liste des matchs pour lesquels
    l'écart de buts entre le vainqueur et le perdant est le plus grand

    Args:
        liste_matchs (list): une liste de matchs

    Returns:
        list: la liste des matchs avec le plus grand écart entre vainqueur et perdant
    """
    liste_m = []
    maxi = 0#init variable maxi
    for match in liste_matchs:
        if maxi < match[4] - match[3]:#cas 1 de l ecart plus grand
            liste_m = [match]
            maxi = match[4] - match[3]
        elif maxi < match[3] - match[4]:#cas 2 de l ecart plus grand
            liste_m = [match]
            maxi = match[3] - match[4]
        elif maxi in (match[4] - match[3], match[3] - match[4]):
            liste_m.append(match)#ajout a la liste si l ecart est le mm que le max
    return liste_m


def liste_des_equipes(liste_matchs):
    """retourne la liste des équipes qui ont participé aux matchs de la liste
    Attention on ne veut voir apparaitre le nom de chaque équipe qu'une seule fois

    Args:
        liste_matchs (list): une liste de matchs

    Returns:
        list: une liste de str contenant le noms des équipes ayant jouer des matchs
    """
    liste_m = []
    for match in liste_matchs:
        if match[1] not in liste_m:#e1 pas encore ds la liste
            liste_m.append(match[1])
        if match[2] not in liste_m:#e2 pas encore ds la liste
            liste_m.append(match[2])
    return liste_m


def premiere_victoire(liste_matchs, equipe):
    """retourne la date de la première victoire de l'equipe.
    Si l'equipe n'a jamais gagné de match on retourne None

    Args:
        liste_matchs (list): une liste de matchs
        equipe (str): le nom d'une équipe (pays)

    Returns:
        str: la date de la première victoire de l'equipe
    """
    for match in liste_matchs:
        if equipe in (match[1], match[2]):#si e1 ou e2 est equipe
            if equipe_gagnante(match) == equipe:#si a gagné
                return match[0]
    return None
def nb_matchs_sans_defaites(liste_matchs, equipe):
    """retourne le plus grand nombre de matchs consécutifs sans défaite pour une equipe donnée.

    Args:
        liste_matchs (list): une liste de matchs
        equipe (str): le nom d'une équipe (pays)

    Returns:
        int: le plus grand nombre de matchs consécutifs sans défaite du pays nom_pays
    """
    cpt = 0
    ind = 0
    while ind < len(liste_matchs):
        if equipe_gagnante(liste_matchs[ind]) == equipe:#si equipe a gagné
            cpt += 1
        else:#sinon on reinitialise
            cpt = 0
        ind += 1
    return cpt

def charger_matchs(nom_fichier):
    """charge un fichier de matchs donné au format CSV en une liste de matchs

    Args:
        nom_fichier (str): nom du fichier CSV contenant les matchs

    Returns:
        list: la liste des matchs du fichier
    """
    liste_m = []
    fic = open(nom_fichier, "r")#ouvrir le fichier en lecture
    fic.readline()#on fait rien avec la ligne des noms
    for ligne in fic:
        l_champs = ligne.split(",")#on sépare chaque champ
        liste_m.append((l_champs[0], l_champs[1], l_champs[2], int(l_champs[3]),
                        int(l_champs[4]), l_champs[5], l_champs[6], l_champs[7],
                        l_champs[8] == "True"))
        #int pour rechanger en nombre et evaluation du dernier pour transformer en bool
    fic.close()#on ferme le fichier
    return liste_m


def sauver_matchs(liste_matchs, nom_fichier):
    """sauvegarde dans un fichier au format CSV une liste de matchs

    Args:
        liste_matchs (list): la liste des matchs à sauvegarder
        nom_fichier (str): nom du fichier CSV

    Returns:
        None: cette fonction ne retourne rien
    """
    fic = open(nom_fichier, "w")#ouvre le fichier en ecriture ou le crée si inexistant
    fic.write("date,home_team,away_team,home_score,away_score,tournament,city,country,neutral\n")
    for match in liste_matchs:
        fic.write(match[0] + ',' + match[1] + ',' + match[2] + ',' + str(match[3]) + ',' +
                  str(match[4]) + ',' + match[5] + ',' + match[6] + ',' + match[7]
                  + ',' +  str(match[8])+"\n")
        #concatenation pr creer le tuple
        #transfo en str et retour a la ligne
    fic.close()


#Fonctions à implémenter dont il faut également implémenter les tests


def plus_de_victoires_que_defaites(liste_matchs, equipe):
    """vérifie si une équipe donnée a obtenu plus de victoires que de défaites
    Args:
        liste_matchs (list): une liste de matchs
        equipe (str): le nom d'une équipe (pays)

    Returns:
        bool: True si l'equipe a obtenu plus de victoires que de défaites
    """
    res = resultats_equipe(liste_matchs, equipe)
    return res[0] > res[2]#renvoie le res de l'eval

def matchs_spectaculaires(liste_matchs):
    """retourne la liste des matchs les plus spectaculaires, c'est à dire les
    matchs dont le nombre total de buts marqués est le plus grand

    Args:
        liste_matchs (list): une liste de matchs

    Returns:
        list: la liste des matchs les plus spectaculaires
    """
    maxi = None
    liste_m = []
    for match in liste_matchs:
        if maxi is None or maxi < nb_buts_marques(match):#init maxi ou si maxi plsu petit
            maxi = nb_buts_marques(match)
            liste_m = [match]
        elif maxi == nb_buts_marques(match):#si nb buts est le mm que maxi
            liste_m.append(match)
    return liste_m

def meilleures_equipes(liste_matchs):
    """retourne la liste des équipes de la liste qui ont le plus petit nombre de defaites

    Args:
        liste_matchs (list): une liste de matchs

    Returns:
        list: la liste des équipes qui ont le plus petit nombre de defaites
    """
    mini = None
    liste_me = []#init liste
    liste_e = liste_des_equipes(liste_matchs)#on parcours une liste des equipes pr faciliter
    for equipe in liste_e:
        if mini is None or mini > resultats_equipe(liste_matchs, equipe)[2]:
            #init mini ou mini plus grand
            mini = resultats_equipe(liste_matchs, equipe)[2]
            liste_me = [equipe]
        elif mini == resultats_equipe(liste_matchs, equipe)[2]:
            #si nb est le mm que mini
            liste_me.append(equipe)
    return liste_me
