# This file is a template, and might need editing before it works on your project.
# This example is for testing Django with MySQL.
#
# The test CI/CD variables MYSQL_DB, MYSQL_USER and MYSQL_PASS can be set in the project settings at:
#     Settings --> CI/CD --> Variables
#
# The Django settings in settings.py, used in tests, might look similar to:
#
#  DATABASES = {
#      'default': {
#         'ENGINE': 'django.db.backends.mysql',
#         'NAME': os.environ.get('MYSQL_DATABASE'),
#        	'USER':  os.environ.get('MYSQL_USER'),
#        	'PASSWORD': os.environ.get('MYSQL_PASSWORD'),
#       	'HOST': 'mysql',
#     	  'PORT': '3306',
#         'CONN_MAX_AGE':60,
#      },
#  }
#
# It is possible to use '--settings' to specify a custom settings file on the command line below or use an environment
# variable to trigger an include on the bottom of your settings.py:
#   if os.environ.get('DJANGO_CONFIG')=='test':
#       from .settings_test import *
#
# It is also possible to hardcode the database name and credentials in the settings.py file and in the .gitlab-ci.yml file.
#
# The mysql service needs some variables too. See https://hub.docker.com/_/mysql for possible mysql env variables
# Note that when using a service in GitLab CI/CD that needs environment variables to run, only variables defined in
# .gitlab-ci.yml are passed to the service and variables defined in the GitLab UI are not.
# https://gitlab.com/gitlab-org/gitlab/-/issues/30178

default:
  image: ubuntu:22.04
  #
  # Pick zero or more services to be used on all builds.
  # Only needed when using a docker container to run your tests in.
  # Check out: https://docs.gitlab.com/ee/ci/services/index.html
  services:
    - mysql:8.0
  #
  # This folder is cached between builds
  # http://docs.gitlab.com/ee/ci/yaml/README.html#cache
  cache:
    paths:
      - ~/.cache/pip/
  before_script:
    - apt -y update
    - apt -y install apt-utils
    


migrations:
  stage: build
  before_script:
  - apt -y update
  - apt -y install apt-utils
  - apt -y install net-tools python3.10 python3-pip mysql-client libmysqlclient-dev
  - apt -y upgrade
  - cd ./nx-gestion-soutien/packages/GestionSoutien
  script:
    - pip3 install -r requirements.txt
    - python3 manage.py makemigrations
    # - python3 manage.py makemigrations myapp
    - python3 manage.py migrate
    - python3 manage.py check
    - python3 manage.py loaddata static/db.json


django-tests:
  stage: test
  before_script:
  - apt -y update
  - apt -y install apt-utils
  - mkdir -p public/test
  - touch public/test/django-tests.txt
  - apt -y install net-tools python3.10 python3-pip mysql-client libmysqlclient-dev
  - apt -y upgrade
  - cd ./nx-gestion-soutien/packages/GestionSoutien
  script:
    - pip3 install -r requirements.txt
    - pip3 install coverage
    # use python3 explicitly. see https://wiki.ubuntu.com/Python/3
    - python3 manage.py test > ../../../public/test/django-tests.txt
  after_script:
    - cd ./nx-gestion-soutien/packages/GestionSoutien
    - coverage report > ../../../codecoverage.xml
    - pwd
  artifacts:
    paths:
      - public
    reports:
      coverage_report: 
        coverage_format: cobertura
        path: ./codecoverage.xml
    when: always
linting:
  stage: test
  image: python:3.10
  before_script:
      - mkdir -p public/badges public/lint
      - echo undefined > public/badges/$CI_JOB_NAME.score
      - pip install pylint-gitlab
  script:
    - cd ./nx-gestion-soutien/packages/GestionSoutien
    - find -type f -name "*.py"
    - pylint --exit-zero --output-format=text $(find -type f -name "*.py" ! -path "**/.venv/**") | tee /tmp/pylint.txt
    - sed -n 's/^Your code has been rated at \([-0-9.]*\)\/.*/\1/p' /tmp/pylint.txt > ../../../public/badges/$CI_JOB_NAME.score
    - pylint --exit-zero --output-format=pylint_gitlab.GitlabCodeClimateReporter $(find -type f -name "*.py" ! -path "**/.venv/**") > ../../../codeclimate.json
    - pylint --exit-zero --output-format=pylint_gitlab.GitlabPagesHtmlReporter $(find -type f -name "*.py" ! -path "**/.venv/**") > ../../../public/lint/index.html
  
  
  after_script:
    - anybadge --overwrite --label $CI_JOB_NAME --value=$(cat public/badges/$CI_JOB_NAME.score) --file=public/badges/$CI_JOB_NAME.svg 4=red 6=orange 8=yellow 10=green
    - |
      echo "Your score is: $(cat public/badges/$CI_JOB_NAME.score)"
    
  artifacts:
    paths:
      - public
    reports:
      codequality: codeclimate.json
    when: always
# test cypress avec image node non focntionnel car manque pip install et pas instalable
#cypress-tests:
  # avec node
  #image: node:latest
  #stage: test
  #script:
    # install dependencies
    #- cd ./nx-gestion-soutien/packages/GestionSoutien
    #- npm ci
    # start the server in the background
    #- npm serve &
    # run Cypress tests
   # - npx cypress run --headless --no-runner-ui --spec "cypress/e2e/prof-accueil-table.spec.cy.js"
 # avec cypress image 
  #image: cypress/browsers:node-20.9.0-chrome-118.0.5993.88-1-ff-118.0.2-edge-118.0.2088.46-1
  #stage: test
  #script:
    # install dependencies
   # - cd ./nx-gestion-soutien/
    #- npm ci
    #- cd ./packages/GestionSoutien
    # start the server in the background
   # - npm run
    #- python3 manage.py runserver
    # run Cypress tests
    #- npx cypress run --browser firefox


# cypress avec docker non focntionnel car pb terminal it
#cypress-tests: 
 # stage: test
  #script:
   # - apt -y install net-tools python3.10 python3-pip mysql-client libmysqlclient-dev
    #- apt -y upgrade
    #- apt -y install docker docker-compose
    #- docker --version
   # - cd ./nx-gestion-soutien/packages/GestionSoutien
    #- pip3 install -r requirements.txt
    #- python3 manage.py makemigrations
    #- python3 manage.py migrate
    #- python3 manage.py check
    #- python3 manage.py loaddata static/db.json
    #- python3 manage.py runserver &
    #- docker run -v $PWD:/e2e -w /e2e cypress/included:3.2.0